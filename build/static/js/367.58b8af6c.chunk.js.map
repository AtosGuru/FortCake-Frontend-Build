{"version":3,"file":"static/js/367.58b8af6c.chunk.js","mappings":"wNASA,MAAMA,EAAqB,IAAIC,IAAJ,CAAQ,CAAEC,WAAW,IAAQC,QAAQC,GAOjDC,eAAeC,EAC1BC,EACAC,GAEA,MAAMC,GAAYC,EAAAA,EAAAA,GAAgBH,GAClC,IAAII,EACJ,GAAIF,EAAW,CAAC,IAADG,EACX,IAAIC,EAOAC,EANJ,IACID,QAAuBL,EAAsBC,EAAUM,QAC3D,CAAE,MAAOC,GAEL,MADAC,QAAQD,MAAM,+BAADE,OAAgCT,EAAUM,SAAWC,GAC5D,IAAIG,MAAM,+BAADD,OAAgCT,EAAUM,SAC7D,CAEA,IACID,GAAgBM,EAAAA,EAAAA,GAAiBP,EACrC,CAAE,MAAOG,GAEL,MADAC,QAAQD,MAAM,yCAA0CH,GAClD,IAAIM,MAAM,2CAADD,OAA4CL,GAC/D,CACAF,GAAOU,EAAAA,EAAAA,GAAU,GAADH,OAAIJ,GAAaI,OAAoB,QAApBN,EAAGH,EAAUa,eAAO,IAAAV,EAAAA,EAAI,IAC7D,MACID,GAAOU,EAAAA,EAAAA,GAAUd,GAErB,IAAK,IAAIgB,EAAI,EAAGA,EAAIZ,EAAKa,OAAQD,IAAK,CAClC,MAAME,EAAMd,EAAKY,GACXG,EAASH,IAAMZ,EAAKa,OAAS,EACnC,IAAIG,EACJ,IACIA,QAAiBC,MAAMH,EAC3B,CAAE,MAAOT,GAEL,GADAC,QAAQD,MAAM,uBAAwBT,EAASS,GAC3CU,EAAQ,MAAM,IAAIP,MAAM,2BAADD,OAA4BX,IACvD,QACJ,CAEA,IAAKoB,EAASE,GAAI,CACd,GAAIH,EAAQ,MAAM,IAAIP,MAAM,2BAADD,OAA4BX,IACvD,QACJ,CAEA,MAAMuB,QAAaH,EAASG,OAC5B,IAAK9B,EAAmB8B,GAAO,CAAC,IAADC,EAAAC,EAC3B,MAAMC,EAII,QAJoBF,EACD,QADCC,EAC1BhC,EAAmBkC,cAAM,IAAAF,OAAA,EAAzBA,EAA2BG,QAAe,CAACC,EAAMpB,KAAW,IAADqB,EACvD,MAAMC,EAAG,GAAApB,OAAOF,EAAcuB,SAAQ,KAAArB,OAAiB,QAAjBmB,EAAIrB,EAAMwB,eAAO,IAAAH,EAAAA,EAAI,IAC3D,OAAOD,EAAKZ,OAAS,EAAC,GAAAN,OAAMkB,EAAI,MAAAlB,OAAKoB,GAAG,GAAApB,OAAQoB,EAAK,GACtD,WAAG,IAAAP,EAAAA,EAAI,gBACd,MAAM,IAAIZ,MAAM,iCAADD,OAAkCe,GACrD,CACA,OAAOH,CACX,CACA,MAAM,IAAIX,MAAM,kCACpB,C","sources":["utils/getTokenList.ts"],"sourcesContent":["/* eslint-disable no-continue */\r\n/* eslint-disable no-await-in-loop */\r\nimport { TokenList } from '@uniswap/token-lists'\r\nimport schema from '@uniswap/token-lists/src/tokenlist.schema.json'\r\nimport Ajv from 'ajv'\r\nimport contenthashToUri from './contenthashToUri'\r\nimport { parseENSAddress } from './ENS/parseENSAddress'\r\nimport uriToHttp from './uriToHttp'\r\n\r\nconst tokenListValidator = new Ajv({ allErrors: true }).compile(schema)\r\n\r\n/**\r\n * Contains the logic for resolving a list URL to a validated token list\r\n * @param listUrl list url\r\n * @param resolveENSContentHash resolves an ens name to a contenthash\r\n */\r\nexport default async function getTokenList(\r\n    listUrl: string,\r\n    resolveENSContentHash: (ensName: string) => Promise<string>,\r\n): Promise<TokenList> {\r\n    const parsedENS = parseENSAddress(listUrl)\r\n    let urls: string[]\r\n    if (parsedENS) {\r\n        let contentHashUri\r\n        try {\r\n            contentHashUri = await resolveENSContentHash(parsedENS.ensName)\r\n        } catch (error) {\r\n            console.error(`Failed to resolve ENS name: ${parsedENS.ensName}`, error)\r\n            throw new Error(`Failed to resolve ENS name: ${parsedENS.ensName}`)\r\n        }\r\n        let translatedUri\r\n        try {\r\n            translatedUri = contenthashToUri(contentHashUri)\r\n        } catch (error) {\r\n            console.error('Failed to translate contenthash to URI', contentHashUri)\r\n            throw new Error(`Failed to translate contenthash to URI: ${contentHashUri}`)\r\n        }\r\n        urls = uriToHttp(`${translatedUri}${parsedENS.ensPath ?? ''}`)\r\n    } else {\r\n        urls = uriToHttp(listUrl)\r\n    }\r\n    for (let i = 0; i < urls.length; i++) {\r\n        const url = urls[i]\r\n        const isLast = i === urls.length - 1\r\n        let response\r\n        try {\r\n            response = await fetch(url)\r\n        } catch (error) {\r\n            console.error('Failed to fetch list', listUrl, error)\r\n            if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n            continue\r\n        }\r\n\r\n        if (!response.ok) {\r\n            if (isLast) throw new Error(`Failed to download list ${listUrl}`)\r\n            continue\r\n        }\r\n\r\n        const json = await response.json()\r\n        if (!tokenListValidator(json)) {\r\n            const validationErrors: string =\r\n                tokenListValidator.errors?.reduce<string>((memo, error) => {\r\n                    const add = `${(error as any).dataPath} ${error.message ?? ''}`\r\n                    return memo.length > 0 ? `${memo}; ${add}` : `${add}`\r\n                }, '') ?? 'unknown error'\r\n            throw new Error(`Token list failed validation: ${validationErrors}`)\r\n        }\r\n        return json as unknown as TokenList\r\n    }\r\n    throw new Error('Unrecognized list URL protocol.')\r\n}\r\n"],"names":["tokenListValidator","Ajv","allErrors","compile","schema","async","getTokenList","listUrl","resolveENSContentHash","parsedENS","parseENSAddress","urls","_parsedENS$ensPath","contentHashUri","translatedUri","ensName","error","console","concat","Error","contenthashToUri","uriToHttp","ensPath","i","length","url","isLast","response","fetch","ok","json","_tokenListValidator$e","_tokenListValidator$e2","validationErrors","errors","reduce","memo","_error$message","add","dataPath","message"],"sourceRoot":""}